use std::{env, fs, path::Path};

fn main() {
    dotenvy::from_filename(".env").ok();

    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("constants.rs");

    let example_colors = env::var("EXAMPLE_COLORS")
        .unwrap_or_default()
        .split(';')
        .map(|c| format!("\"{}\"", c))
        .collect::<Vec<_>>()
        .join(", ");

    let content = format!(
        r#"
          // AUTO-GENERATED FILE. DO NOT EDIT.
          // Generated by build.rs from .env

          pub const ENV: &str = "{env}";
          pub const PORT: u16 = {port};
          pub const ALLOW_ORIGIN: &str = "{allow_origin}";
          pub const POSTGRE_UNIX_SOCKET: bool = {unix_socket};
          pub const PG_SOCKET_DIR: &str = "{socket_dir}";
          pub const PG_HOST: &str = "{host}";
          pub const PG_PORT: u16 = {pg_port};
          pub const PG_DBNAME: &str = "{dbname}";
          pub const PG_USER: &str = "{user}";
          pub const PG_PASSWORD: &str = "{password}";
          pub const PG_URL: &str = "{pg_url}";

          pub const MIN_COMPRESS_SIZE: u16 = {min_compress};
          pub const MIN_RECTANGLE_WIDTH: u16 = {min_width};
          pub const EXAMPLE_COLORS: [&str; 9] = [{colors}];
          pub const MAX_BACKGROUND_PICTURE_SIZE: usize = {max_bg};
        "#,
        env = env::var("ENV").unwrap(),
        port = env::var("PORT").unwrap(),
        allow_origin = env::var("ALLOW_ORIGIN").unwrap(),
        unix_socket = env::var("POSTGRE_UNIX_SOCKET").unwrap(),
        socket_dir = env::var("PG_SOCKET_DIR").unwrap(),
        host = env::var("PG_HOST").unwrap(),
        pg_port = env::var("PG_PORT").unwrap(),
        dbname = env::var("PG_DBNAME").unwrap(),
        user = env::var("PG_USER").unwrap(),
        password = env::var("PG_PASSWORD").unwrap(),
        pg_url = env::var("PG_URL").unwrap(),
        min_compress = env::var("MIN_COMPRESS_SIZE").unwrap(),
        min_width = env::var("MIN_RECTANGLE_WIDTH").unwrap(),
        colors = example_colors,
        max_bg = env::var("MAX_BACKGROUND_PICTURE_SIZE").unwrap(),
    );

    fs::write(dest_path, content).unwrap();
}
